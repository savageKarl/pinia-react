name: Release and Sync

on:
  push:
    branches:
      - main
      - dev

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: write
      pull-requests: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.14.0

      - name: Configure pnpm store path
        run: pnpm config set store-dir ~/.pnpm-store

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install Frontend Dependencies
        run: pnpm install --frozen-lockfile

      - name: Run Lint & Format & Test Check
        run: pnpm run-p check test

      - name: Build
        run: pnpm build

      - name: Semantic Release
        id: semantic
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: pnpm --filter pinia-react semantic-release

  sync-back-to-dev:
      runs-on: ubuntu-latest
      needs: release
      if: github.ref == 'refs/heads/main' && needs.release.result == 'success'
      steps:
        - name: Checkout code
          uses: actions/checkout@v4
          with:
            token: ${{ secrets.PAT_FOR_ACTIONS }}
            fetch-depth: 0

        - name: Configure Git
          run: |
            git config --global user.name 'github-actions[bot]'
            git config --global user.email 'github-actions[bot]@users.noreply.github.com'

        - name: Sync main back to dev
          run: |
            echo "--- 正在同步 main 分支到 dev ---"
            
            # 强制从远程拉取所有分支和标签的最新信息
            echo "1. 正在从远程拉取所有最新数据..."
            git fetch --all --tags
            
            # (调试日志) 打印出 main 和 dev 分支最新的5条 commit，检查 release commit 是否可见
            echo "--- origin/main 最新日志 ---"
            git log origin/main -n 5 --pretty=oneline
            echo "--- origin/dev 最新日志 ---"
            git log origin/dev -n 5 --pretty=oneline
            
            # 切换到 dev 分支并确保它是最新的
            echo "2. 正在切换到 dev 分支..."
            git checkout dev
            git pull origin dev
            
            # 将 dev 分支 rebase 到最新的 main 分支上
            echo "3. 正在将 dev rebase 到 origin/main..."
            git rebase origin/main
            
            # 将更新后的 dev 分支强制推送回远程仓库
            echo "4. 正在强制推送更新后的 dev 分支..."
            git push origin dev --force
            
            echo "--- 同步完成 ---"